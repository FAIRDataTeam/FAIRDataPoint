dist: xenial
language: generic

services:
  - mongodb

jdk:
  - openjdk11

env:
  - IMAGE="fairdata/fairdatapoint" \
    IMAGE_TAG="$IMAGE:$TRAVIS_COMMIT" \
    IMAGE_TAG_BRANCH="$IMAGE:"`echo $TRAVIS_BRANCH | sed 's#/#-#g'` \
    IMAGE_TAG_DEVELOP="$IMAGE:develop" \
    IMAGE_TAG_LATEST="$IMAGE:latest"

before_install:
  # 1. Log to public Docker Hub
  - docker login -u "$PUBLIC_DOCKER_USER" -p "$PUBLIC_DOCKER_PASSWORD"

jobs:
  include:
    - stage: build
      install:
        # 1. Install fairmetadata4j
        - git clone --depth 1 -b $TRAVIS_BRANCH https://github.com/DTL-FAIRData/fairmetadata4j ./fairmetadata4j || git clone --depth 1 -b develop https://github.com/DTL-FAIRData/fairmetadata4j ./fairmetadata4j
        - cd  ./fairmetadata4j
        - mvn --quiet --fail-fast install
        - cd ..
        # 2. Install Spring Rdf Migration
        - git clone https://github.com/FAIRDataTeam/spring-rdf-migration.git
        - cd spring-rdf-migration
        - mvn --quiet --fail-fast -DskipTests install
        - cd ..
        # 3. Install Spring Security ACL Mongo
        - git clone https://github.com/FAIRDataTeam/spring-security-acl-mongodb
        - cd spring-security-acl-mongodb
        - mvn --quiet --fail-fast -DskipTests install
        - cd ..
        # 4. Init and check testing Mongo Database
        - mongo fdp-test --eval 'db.collection.find()'
      script:
        # 5. Build FAIR Data Point
        - mvn org.jacoco:jacoco-maven-plugin:prepare-agent test
        - mvn --quiet --fail-fast -DskipTests package
        - docker pull $IMAGE_TAG_DEVELOP
        - docker build --cache-from $IMAGE_TAG_DEVELOP -t $IMAGE_TAG .
        - docker push $IMAGE_TAG
      after_success:
        - mvn org.jacoco:jacoco-maven-plugin:report coveralls:report

    - stage: tag
      if: (branch = develop) AND (NOT (type IN (pull_request)))
      install: false
      script:
        - docker pull $IMAGE_TAG
        - docker image tag $IMAGE_TAG $IMAGE_TAG_DEVELOP
        - docker push $IMAGE_TAG_DEVELOP

    - stage: tag
      if: (branch = master) AND (NOT (type IN (pull_request)))
      install: false
      script:
        - docker pull $IMAGE_TAG
        - docker image tag $IMAGE_TAG $IMAGE_TAG_LATEST
        - docker push $IMAGE_TAG_LATEST

    - stage: tag
      if: (type = push)
      install: false
      script:
        - docker pull $IMAGE_TAG
        - docker image tag $IMAGE_TAG $IMAGE_TAG_BRANCH
        - docker push $IMAGE_TAG_BRANCH
