name: FAIRDataPoint CI

on:
  push:
  pull_request:

jobs:
  btp:
    name: Build-Tag-Push
    runs-on: ubuntu-latest
    
    env:
      PUBLIC_IMAGE: fairdata/fairdatapoint
      PRIVATE_IMAGE: ${{ secrets.PRIVATE_REGISTRY_URL }}/fairdatapoint
      TAG_DEVELOP: develop
      TAG_LATEST: latest
      JDK_VERSION: 16
      JDK_FILE: openjdk-16.0.1_linux-x64_bin.tar.gz
      JDK_URL: https://download.java.net/java/GA/jdk16.0.1/7147401fd7354114ac51ef3e1328291f/9/GPL/openjdk-16.0.1_linux-x64_bin.tar.gz

    services:
      mongo:
        image: mongo:4.2
        ports: 
        - 27017:27017
        options: --name mongo

    steps:
    - uses: actions/checkout@v2

    - name: Fetch all history for all tags and branches
      run: git fetch --prune --unshallow

    - name: Prepare JDK folder
      run: mkdir -p ~/jdk

# (1) -> Prepare cache and Java
    - name: Cache ~/.m2
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  
    - name: Cache JDK folder
      uses: actions/cache@v1
      with:
        path: ~/jdk
        key: ${{ env.JDK_FILE }}

# (2) -> Prepare Java
    - name: Download JDK
      run: |
        if [ ! -f ~/jdk/$JDK_FILE ]; then
          wget --quiet $JDK_URL -O ~/jdk/$JDK_FILE
        fi
        cp ~/jdk/$JDK_FILE .

    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: ${{ env.JDK_VERSION }}
        jdkFile: ${{ env.JDK_FILE }}

    - name: Verify Maven and Java
      run: |
        mvn --version

# (3) -> Test and build
    - name: Run tests
      run: |
        mvn --quiet -U -B org.jacoco:jacoco-maven-plugin:prepare-agent test

    - name: Build package
      run: |
        mvn --quiet -B -U --fail-fast -DskipTests package

    - name: Report coverage
      continue-on-error: true
      run: |
        mvn --quiet -B -U -DrepoToken=$COVERALLS_TOKEN org.jacoco:jacoco-maven-plugin:report coveralls:report
        if [ $? -eq 0 ]; then
          echo "Coverage reported to Coveralls.io"
        fi
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}

# (4) -> Build Docker image
    - name: Docker build
      run: |
        docker pull $PUBLIC_IMAGE:$TAG_DEVELOP
        docker build --cache-from $PUBLIC_IMAGE:$TAG_DEVELOP -t $PRIVATE_IMAGE:$GITHUB_SHA .

# (5) -> Docker image tagging
    - name: Docker login
      if: github.event_name == 'push'
      run: |
        docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
        docker login -u "$PRIVATE_REGISTRY_USERNAME" -p "$PRIVATE_REGISTRY_PASSWORD" "$PRIVATE_REGISTRY_URL"
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        PRIVATE_REGISTRY_URL: ${{ secrets.PRIVATE_REGISTRY_URL }}
        PRIVATE_REGISTRY_USERNAME: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
        PRIVATE_REGISTRY_PASSWORD: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}

    - name: Docker push - commit SHA (private)
      if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
      run: |
        docker push $PRIVATE_IMAGE:$GITHUB_SHA

    - name: Docker tag and push - branch (private)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/') && !contains(github.ref, 'release')
      run: |
        GITHUB_BRANCH=`echo $GITHUB_REF | cut -d/ -f3- | sed 's#/#-#g'`
        docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $PRIVATE_IMAGE:$GITHUB_BRANCH
        docker push $PRIVATE_IMAGE:$GITHUB_BRANCH

    - name: Docker tag and push - develop (public)
      if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
      run: |
        docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $PUBLIC_IMAGE:$TAG_DEVELOP
        docker push $PUBLIC_IMAGE:$TAG_DEVELOP

    - name: Docker tag and push - latest (public)
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $PUBLIC_IMAGE:$TAG_LATEST
        docker push $PUBLIC_IMAGE:$TAG_LATEST

    - name: Docker tag and push - version tag (public)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        GITHUB_TAG=`echo $GITHUB_REF | cut -d/ -f3` 
        # Release vX.Y.Z
        if [[ $GITHUB_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          IMAGE_TAG_MAJOR="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v(.*)\..*\..*/\1/g"`
          IMAGE_TAG_MINOR="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v(.*)\..*/\1/g"`
          IMAGE_TAG_PATCH="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v//g"`
          echo "Publishing release: $IMAGE_TAG_PATCH";
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_MAJOR && docker push $IMAGE_TAG_MAJOR;
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_MINOR && docker push $IMAGE_TAG_MINOR;
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_PATCH && docker push $IMAGE_TAG_PATCH;
        fi
        # Release candidate vX.Y.Z-rc.R
        if [[ $GITHUB_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
          IMAGE_TAG_RC="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v//g"`
          echo "Publishing release candidate: $IMAGE_TAG_RC";
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_RC && docker push $IMAGE_TAG_RC;
        fi
